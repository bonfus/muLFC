#include <cmath>
#include "acutest.h"
#include "randomness.h"
#include "lattice.h"

#define TEST_EPS 1e-6

void test_reciprocal_vectors(void)
{
  Mat3 m = Mat3::Zero();
  Mat3 r(3,3);
  Mat3 check(3,3);
  
  m(0,0) =  5.9990000; //        0.0000000000         0.0000000000
  m(0,1) = -2.9995000;  m(1,1) = 5.1952864601  ;  //   0.0000000000
  m(2,2) = 11.7100000381;

  recips(m, r);

  check = (r.transpose()*m)/6.28318530718;

  TEST_CHECK(check.isIdentity(TEST_EPS));
}

void test_crys2cart(void)
{
  Mat3 m = Mat3::Zero();
  Mat3 r(3,3);
  Mat3 check(3,3);
  // http://www.crystallography.net/cod/2019769.cif

  m.col(0) << 10.1923999786 ,  0.0000000000 , 0.0000000000;
  m.col(1) << -3.3110542055 , 10.3568048812 , 0.0000000000;
  m.col(2) << -1.0982022679 , -2.8074704892 , 16.6975489454;

  Vec3 p_frac, p_cart;
  Vec3 aux;
  p_frac << 0.317600034 , 0.860740039 , 0.599860043;

  Crys2Cart(m, p_frac, p_cart, false);
  Crys2Cart(m, p_cart, aux, true);

  aux = aux-p_frac;
  TEST_CHECK(aux.norm() < TEST_EPS);
  
  aux << -0.271618009 , 7.230427265 , 10.016192436;
  aux = p_cart - aux;
  TEST_CHECK(aux.norm() < TEST_EPS);
  
  // start from cartesian coordinates
  p_cart << 6.054761887 , 0.318907380 , 6.681357384;
  Crys2Cart(m, p_cart, p_frac, true);
  // check taken from VESTA
  aux <<  0.6824000 , 0.139260000 , 0.40014000;
  
  aux = p_frac - aux;
  TEST_CHECK(aux.norm() < TEST_EPS);
  
}

void test_DC(void)
{
  Mat3 latt = Mat3::Zero();
  // http://www.crystallography.net/cod/2019769.cif

  latt.col(0) << 10.1923999786 ,  0.0000000000 , 0.0000000000;
  latt.col(1) << -3.3110542055 , 10.3568048812 , 0.0000000000;
  latt.col(2) << -1.0982022679 , -2.8074704892 , 16.6975489454;
  
  // Atomic positions
  MatX pos(3,196);
  pos.col(0)	 << 0.317600 , 0.860740 , 0.599860043;
  pos.col(1)	 << 0.682400 , 0.139260 , 0.400140009;
  pos.col(2)	 << 0.283300 , 0.728370 , 0.599250059;
  pos.col(3)	 << 0.716700 , 0.271630 , 0.400749993;
  pos.col(4)	 << 0.238900 , 0.641940 , 0.528140061;
  pos.col(5)	 << 0.761100 , 0.358060 , 0.471860020;
  pos.col(6)	 << 0.225720 , 0.684770 , 0.455800014;
  pos.col(7)	 << 0.774280 , 0.315230 , 0.544200010;
  pos.col(8)	 << 0.259660 , 0.818190 , 0.457740027;
  pos.col(9)	 << 0.740340 , 0.181810 , 0.542259997;
  pos.col(10)	 << 0.305000 , 0.905990 , 0.529350035;
  pos.col(11)	 << 0.695000 , 0.094010 , 0.470650046;
  pos.col(12)	 << 0.179440 , 0.589490 , 0.380240016;
  pos.col(13)	 << 0.820560 , 0.410510 , 0.619760094;
  pos.col(14)	 << 0.090000 , 0.464300 , 0.378750009;
  pos.col(15)	 << 0.910000 , 0.535700 , 0.621250043;
  pos.col(16)	 << 0.049500 , 0.373900 , 0.309370013;
  pos.col(17)	 << 0.950500 , 0.626100 , 0.690629982;
  pos.col(18)	 << 0.096430 , 0.404620 , 0.237820019;
  pos.col(19)	 << 0.903570 , 0.595380 , 0.762179991;
  pos.col(20)	 << 0.184800 , 0.529860 , 0.238450021;
  pos.col(21)	 << 0.815200 , 0.470140 , 0.761550074;
  pos.col(22)	 << 0.225300 , 0.620120 , 0.307720029;
  pos.col(23)	 << 0.774700 , 0.379880 , 0.692280024;
  pos.col(24)	 << 0.054070 , 0.312880 , 0.159970009;
  pos.col(25)	 << 0.945930 , 0.687120 , 0.840030086;
  pos.col(26)	 << 0.967920 , 0.175880 , 0.158030011;
  pos.col(27)	 << 0.032080 , 0.824120 , 0.841969985;
  pos.col(28)	 << 0.909470 , 0.099350 , 0.090130005;
  pos.col(29)	 << 0.090530 , 0.900650 , 0.909870083;
  pos.col(30)	 << 0.814350 , 0.964630 , 0.079250003;
  pos.col(31)	 << 0.185650 , 0.035370 , 0.920750077;
  pos.col(32)	 << 0.762800 , 0.905350 , 0.143350009;
  pos.col(33)	 << 0.237200 , 0.094650 , 0.856650044;
  pos.col(34)	 << 0.676200 , 0.777440 , 0.132000004;
  pos.col(35)	 << 0.323800 , 0.222560 , 0.868000091;
  pos.col(36)	 << 0.638320 , 0.705880 , 0.055890006;
  pos.col(37)	 << 0.361680 , 0.294120 , 0.944110018;
  pos.col(38)	 << 0.686920 , 0.765670 , 0.992940113;
  pos.col(39)	 << 0.313080 , 0.234330 , 0.007060000;
  pos.col(40)	 << 0.773590 , 0.893520 , 0.002470000;
  pos.col(41)	 << 0.226410 , 0.106480 , 0.997530073;
  pos.col(42)	 << 0.299500 , 0.365080 , 0.599090024;
  pos.col(43)	 << 0.700500 , 0.634920 , 0.400910028;
  pos.col(44)	 << 0.160020 , 0.308930 , 0.571210032;
  pos.col(45)	 << 0.839980 , 0.691070 , 0.428789992;
  pos.col(46)	 << 0.120120 , 0.224930 , 0.499020053;
  pos.col(47)	 << 0.879880 , 0.775070 , 0.500980056;
  pos.col(48)	 << 0.217520 , 0.192910 , 0.453380010;
  pos.col(49)	 << 0.782480 , 0.807090 , 0.546620014;
  pos.col(50)	 << 0.355500 , 0.251260 , 0.482550022;
  pos.col(51)	 << 0.644500 , 0.748740 , 0.517450030;
  pos.col(52)	 << 0.396900 , 0.336510 , 0.554750053;
  pos.col(53)	 << 0.603100 , 0.663490 , 0.445250000;
  pos.col(54)	 << 0.173660 , 0.097600 , 0.377530041;
  pos.col(55)	 << 0.826340 , 0.902400 , 0.622470069;
  pos.col(56)	 << 0.255500 , 0.104930 , 0.314920013;
  pos.col(57)	 << 0.744500 , 0.895070 , 0.685080039;
  pos.col(58)	 << 0.216700 , 0.013290 , 0.245940020;
  pos.col(59)	 << 0.783300 , 0.986710 , 0.754060061;
  pos.col(60)	 << 0.094450 , 0.909550 , 0.237130017;
  pos.col(61)	 << 0.905550 , 0.090450 , 0.762870050;
  pos.col(62)	 << 0.011340 , 0.902470 , 0.298470000;
  pos.col(63)	 << 0.988660 , 0.097530 , 0.701530023;
  pos.col(64)	 << 0.049100 , 0.995180 , 0.366960008;
  pos.col(65)	 << 0.950900 , 0.004820 , 0.633040045;
  pos.col(66)	 << 0.055320 , 0.814390 , 0.160400011;
  pos.col(67)	 << 0.944680 , 0.185610 , 0.839600013;
  pos.col(68)	 << 0.961260 , 0.680390 , 0.160450000;
  pos.col(69)	 << 0.038740 , 0.319610 , 0.839550038;
  pos.col(70)	 << 0.909810 , 0.598390 , 0.092820011;
  pos.col(71)	 << 0.090190 , 0.401610 , 0.907180041;
  pos.col(72)	 << 0.813500 , 0.464840 , 0.083660002;
  pos.col(73)	 << 0.186500 , 0.535160 , 0.916340029;
  pos.col(74)	 << 0.769800 , 0.393730 , 0.006930000;
  pos.col(75)	 << 0.230200 , 0.606270 , 0.993070106;
  pos.col(76)	 << 0.681090 , 0.266750 , 0.997610034;
  pos.col(77)	 << 0.318910 , 0.733250 , 0.002390000;
  pos.col(78)	 << 0.634550 , 0.207100 , 0.061130002;
  pos.col(79)	 << 0.365450 , 0.792900 , 0.938870036;
  pos.col(80)	 << 0.676600 , 0.278130 , 0.137240000;
  pos.col(81)	 << 0.323400 , 0.721870 , 0.862760052;
  pos.col(82)	 << 0.764790 , 0.405270 , 0.148500006;
  pos.col(83)	 << 0.235210 , 0.594730 , 0.851500075;
  pos.col(84)	 << 0.423200 , 0.070800 , 0.677500071;
  pos.col(85)	 << 0.576800 , 0.929200 , 0.322500010;
  pos.col(86)	 << 0.473000 , 0.097000 , 0.630000004;
  pos.col(87)	 << 0.527000 , 0.903000 , 0.370000019;
  pos.col(88)	 << 0.460400 , 0.492400 , 0.709000046;
  pos.col(89)	 << 0.539600 , 0.507600 , 0.291000035;
  pos.col(90)	 << 0.482300 , 0.528300 , 0.691800032;
  pos.col(91)	 << 0.517700 , 0.471700 , 0.308200020;
  pos.col(92)	 << 0.290000 , 0.696800 , 0.647100010;
  pos.col(93)	 << 0.710000 , 0.303200 , 0.352900042;
  pos.col(94)	 << 0.217300 , 0.552600 , 0.528800021;
  pos.col(95)	 << 0.782700 , 0.447400 , 0.471200003;
  pos.col(96)	 << 0.252100 , 0.850200 , 0.410200008;
  pos.col(97)	 << 0.747900 , 0.149800 , 0.589800044;
  pos.col(98)	 << 0.326800 , 0.995500 , 0.529200052;
  pos.col(99) << 	0.673200 , 0.004500 , 0.470800001;
  pos.col(100) << 	0.056400 , 0.440600 , 0.426000028;
  pos.col(101) << 	0.943600 , 0.559400 , 0.574000024;
  pos.col(102) << 	0.989400 , 0.290700 , 0.310700013;
  pos.col(103) << 	0.010600 , 0.709300 , 0.689300011;
  pos.col(104) << 	0.217500 , 0.553500 , 0.191000016;
  pos.col(105) << 	0.782500 , 0.446500 , 0.809000051;
  pos.col(106) << 	0.284700 , 0.703600 , 0.306100029;
  pos.col(107) << 	0.715300 , 0.296400 , 0.693900023;
  pos.col(108) << 	0.954900 , 0.143200 , 0.205800001;
  pos.col(109) << 	0.045100 , 0.856800 , 0.794200051;
  pos.col(110) << 	0.930600 , 0.134200 , 0.043700002;
  pos.col(111) << 	0.069400 , 0.865800 , 0.956300050;
  pos.col(112) << 	0.787200 , 0.952900 , 0.194999996;
  pos.col(113) << 	0.212800 , 0.047100 , 0.805000028;
  pos.col(114) << 	0.643500 , 0.739600 , 0.175799999;
  pos.col(115) << 	0.356500 , 0.260400 , 0.824200081;
  pos.col(116) << 	0.581200 , 0.619200 , 0.047500002;
  pos.col(117) << 	0.418800 , 0.380800 , 0.952500043;
  pos.col(118) << 	0.804000 , 0.931200 , 0.958200026;
  pos.col(119) << 	0.196000 , 0.068800 , 0.041800002;
  pos.col(120) << 	0.093300 , 0.327900 , 0.601200010;
  pos.col(121) << 	0.906700 , 0.672100 , 0.398800043;
  pos.col(122) << 	0.026400 , 0.188900 , 0.480399999;
  pos.col(123) << 	0.973600 , 0.811100 , 0.519600053;
  pos.col(124) << 	0.422700 , 0.232800 , 0.452800040;
  pos.col(125) << 	0.577300 , 0.767200 , 0.547200013;
  pos.col(126) << 	0.490700 , 0.374100 , 0.573000061;
  pos.col(127) << 	0.509300 , 0.625900 , 0.427000020;
  pos.col(128) << 	0.338400 , 0.173300 , 0.319700022;
  pos.col(129) << 	0.661600 , 0.826700 , 0.680300059;
  pos.col(130) << 	0.273200 , 0.021100 , 0.204800010;
  pos.col(131) << 	0.726800 , 0.978900 , 0.795200014;
  pos.col(132) << 	0.928500 , 0.834000 , 0.293500028;
  pos.col(133) << 	0.071500 , 0.166000 , 0.706500024;
  pos.col(134) << 	0.990300 , 0.989200 , 0.406900011;
  pos.col(135) << 	0.009700 , 0.010800 , 0.593100070;
  pos.col(136) << 	0.938100 , 0.653600 , 0.208900012;
  pos.col(137) << 	0.061900 , 0.346400 , 0.791100041;
  pos.col(138) << 	0.937700 , 0.628600 , 0.046000001;
  pos.col(139) << 	0.062300 , 0.371400 , 0.954000044;
  pos.col(140) << 	0.799800 , 0.431000 , 0.962500072;
  pos.col(141) << 	0.200200 , 0.569000 , 0.037500002;
  pos.col(142) << 	0.576100 , 0.121000 , 0.053100003;
  pos.col(143) << 	0.423900 , 0.879000 , 0.946900068;
  pos.col(144) << 	0.645400 , 0.240200 , 0.181200002;
  pos.col(145) << 	0.354600 , 0.759800 , 0.818800007;
  pos.col(146) << 	0.792200 , 0.452100 , 0.200200012;
  pos.col(147) << 	0.207800 , 0.547900 , 0.799800026;
  pos.col(148) << 	0.448000 , 0.112500 , 0.732400024;
  pos.col(149) << 	0.552000 , 0.887500 , 0.267600000;
  pos.col(150) << 	0.505000 , 0.085500 , 0.650400036;
  pos.col(151) << 	0.495000 , 0.914500 , 0.349600045;
  pos.col(152) << 	0.359800 , 0.106900 , 0.652000046;
  pos.col(153) << 	0.640200 , 0.893100 , 0.348000007;
  pos.col(154) << 	0.497600 , 0.165600 , 0.675600039;
  pos.col(155) << 	0.502400 , 0.834400 , 0.324400014;
  pos.col(156) << 	0.554900 , 0.077800 , 0.615000046;
  pos.col(157) << 	0.445100 , 0.922200 , 0.385000006;
  pos.col(158) << 	0.430800 , 0.123600 , 0.586200052;
  pos.col(159) << 	0.569200 , 0.876400 , 0.413800029;
  pos.col(160) << 	0.464400 , 0.538400 , 0.762000080;
  pos.col(161) << 	0.535600 , 0.461600 , 0.237999987;
  pos.col(162) << 	0.503100 , 0.425300 , 0.711300052;
  pos.col(163) << 	0.496900 , 0.574700 , 0.288700001;
  pos.col(164) << 	0.508900 , 0.552600 , 0.676200028;
  pos.col(165) << 	0.491100 , 0.447400 , 0.323800053;
  pos.col(166) << 	0.492000 , 0.590400 , 0.739600065;
  pos.col(167) << 	0.508000 , 0.409600 , 0.260400016;
  pos.col(168) << 	0.529000 , 0.466700 , 0.702100027;
  pos.col(169) << 	0.471000 , 0.533300 , 0.297900025;
  pos.col(170) << 	0.522400 , 0.573500 , 0.650000005;
  pos.col(171) << 	0.477600 , 0.426500 , 0.350000047;
  pos.col(172) << 	0.089090 , 0.352700 , 0.098470004;
  pos.col(173) << 	0.910910 , 0.647300 , 0.901530091;
  pos.col(174) << 	0.666110 , 0.749810 , 0.855250050;
  pos.col(175) << 	0.333890 , 0.250190 , 0.144750003;
  pos.col(176) << 	0.582280 , 0.573570 , 0.903990075;
  pos.col(177) << 	0.417720 , 0.426430 , 0.096010006;
  pos.col(178) << 	0.100850 , 0.848280 , 0.099750000;
  pos.col(179) << 	0.899150 , 0.151720 , 0.900250038;
  pos.col(180) << 	0.655920 , 0.251800 , 0.859810025;
  pos.col(181) << 	0.344080 , 0.748200 , 0.140190013;
  pos.col(182) << 	0.573900 , 0.075430 , 0.908180061;
  pos.col(183) << 	0.426100 , 0.924570 , 0.091820005;
  pos.col(184) << 	0.360400 , 0.937100 , 0.674050005;
  pos.col(185) << 	0.639600 , 0.062900 , 0.325950047;
  pos.col(186) << 	0.376000 , 0.980000 , 0.651000083;
  pos.col(187) << 	0.624000 , 0.020000 , 0.348999998;
  pos.col(188) << 	0.319800 , 0.434500 , 0.675600039;
  pos.col(189) << 	0.680200 , 0.565500 , 0.324400014;
  pos.col(190) << 	0.337000 , 0.459600 , 0.667100068;
  pos.col(191) << 	0.663000 , 0.540400 , 0.332900013;
  pos.col(192) << 	0.642880 , 0.691550 , 0.911800101;
  pos.col(193) << 	0.357120 , 0.308450 , 0.088200009;
  pos.col(194) << 	0.634280 , 0.193090 , 0.916220031;
  pos.col(195) << 	0.365720 , 0.806910 , 0.083780000;

  DistanceCalc DC(latt, pos);
  
  Vec3 interstitial;

  interstitial.setZero();
  
  TEST_CHECK ( abs(DC.GetMinDistanceFromAtoms(interstitial) - 1.89142) < 10*TEST_EPS );
  
  interstitial << 0.1 , 0.2, 0.3;
  TEST_CHECK ( abs(DC.GetMinDistanceFromAtoms(interstitial) - 1.71187) < 10*TEST_EPS );
  
  IVecX types(196);
  VecX distances(1);
  types.setOnes();
  
  // distance from all atoms
  DC.GetMinDistancesFromAtoms(types, interstitial, distances);
  TEST_CHECK ( abs( distances(0)- 1.71187) < 10*TEST_EPS );
  
  // distance from N 
  types.setZero();
  types(195) = 1; types(194) = 1; types(193) = 1; types(192) = 1;
  
  DC.GetMinDistancesFromAtoms(types, interstitial, distances);
  TEST_CHECK ( abs( distances(0)- 4.656116) < 50*TEST_EPS );

  // distance from N 
  types.setZero();
  types(195) = 1; types(194) = 1; types(193) = 1; types(192) = 1;

  interstitial << 0.5 , 0.0, 0.0;
  DC.GetMinDistancesFromAtoms(types, interstitial, distances);
  TEST_CHECK ( abs( distances(0)- 2.7617) < 50*TEST_EPS );

}
void check_uniform()
{
    /* This test is insane and is likely to fail.
     * The code should be refactored to allow better testing of
     * the method used to sample the unit cell.
     */
    int nloops = 1000000;
    int i;
    Mat3 lat;
    Vec3 v;
    int x_half=0;
    int y_half=0;
    int z_half=0;

    lat.setZero();
    lat.col(0) << 10.1923999786 ,  0.0000000000 , 0.0000000000;
    lat.col(1) << -3.3110542055 , 10.3568048812 , 0.0000000000;
    lat.col(2) << -1.0982022679 , -2.8074704892 , 16.6975489454;

    UniformRandomInsideUnitCell a(lat, 1000);
    
    for (i=0;i<nloops; i++)
    {
        a.GetRandomPos(v);
        if ( v(0) > 0.5 ) x_half++;
        if ( v(1) > 0.5 ) y_half++;
        if ( v(2) > 0.5 ) z_half++;
    }

    TEST_CHECK ( abs( ((T)x_half)/((T)nloops) - 0.5) < 0.001 );
    TEST_CHECK ( abs( ((T)y_half)/((T)nloops) - 0.5) < 0.001 );
    TEST_CHECK ( abs( ((T)z_half)/((T)nloops) - 0.5) < 0.001 );

    lat.setZero();
    lat.col(0) << 10. ,  0.0 , 0.0;
    lat.col(1) << 10.0 , 10. , 0.0;
    lat.col(2) << 0.0 , 0.0 , 10.;

    UniformRandomInsideUnitCell b(lat, 1000);
    
    x_half = 0; y_half = 0; z_half = 0;
    for (i=0;i<nloops; i++)
    {
        b.GetRandomPos(v);
        if ( v(0) > 0.5 ) x_half++;
        if ( v(1) > 0.5 ) y_half++;
        if ( v(2) > 0.5 ) z_half++;
    }

    TEST_CHECK ( abs( ((T)x_half)/((T)nloops) - 0.5) < 0.001 );
    TEST_CHECK ( abs( ((T)y_half)/((T)nloops) - 0.5) < 0.001 );
    TEST_CHECK ( abs( ((T)z_half)/((T)nloops) - 0.5) < 0.001 );

}

TEST_LIST = {
    { "reciprocal_vectors",     test_reciprocal_vectors },
    { "crys2cart",              test_crys2cart },
    { "distance" ,              test_DC },
    { "uniforn_random" ,        check_uniform },
    { NULL, NULL }
};

